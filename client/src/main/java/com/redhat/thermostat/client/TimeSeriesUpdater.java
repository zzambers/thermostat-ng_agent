/*
 * Copyright 2012 Red Hat, Inc.
 *
 * This file is part of Thermostat.
 *
 * Thermostat is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2, or (at your
 * option) any later version.
 *
 * Thermostat is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Thermostat; see the file COPYING.  If not see
 * <http://www.gnu.org/licenses/>.
 *
 * Linking this code with other modules is making a combined work
 * based on this code.  Thus, the terms and conditions of the GNU
 * General Public License cover the whole combination.
 *
 * As a special exception, the copyright holders of this code give
 * you permission to link this code with independent modules to
 * produce an executable, regardless of the license terms of these
 * independent modules, and to copy and distribute the resulting
 * executable under terms of your choice, provided that you also
 * meet, for each linked independent module, the terms and conditions
 * of the license of that module.  An independent module is a module
 * which is not derived from or based on this code.  If you modify
 * this code, you may extend this exception to your version of the
 * library, but you are not obligated to do so.  If you do not wish
 * to do so, delete this exception statement from your version.
 */

package com.redhat.thermostat.client;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.swing.SwingWorker;

import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.TimeSeries;

/**
 * Updates a TimeSeries by asynchronously fetching data and updating the
 * TimeSeries on the Swing EDT.
 *
 * @param <N> the type of data to be added to the TimeSeries
 * @param <T> the type of data generated by the data source
 */
public class TimeSeriesUpdater<N extends Number, T> extends SwingWorker<List<DiscreteTimeData<N>>, Void> {

    private final Iterable<T> dataSource;
    private final TimeSeries toUpdate;
    private final Converter<N, T> converter;
    private final LastUpdateTimeCallback callback;

    public interface Converter<U extends Number, V> {
        public DiscreteTimeData<U> convert(V toConvert);
    }

    public interface LastUpdateTimeCallback {
        public void update(long lastUpdateTime);
    }

    public TimeSeriesUpdater(Iterable<T> dataSource, TimeSeries toUpdate,
            Converter<N, T> converter, LastUpdateTimeCallback callback) {
        this.dataSource = dataSource;
        this.toUpdate = toUpdate;
        this.converter = converter;
        this.callback = callback;
    }

    @Override
    protected List<DiscreteTimeData<N>> doInBackground() throws Exception {
        return getRecentData();
    }

    private List<DiscreteTimeData<N>> getRecentData() {
        List<DiscreteTimeData<N>> load = new ArrayList<DiscreteTimeData<N>>();

        for (T data: dataSource) {
            load.add(converter.convert(data));
        }
        // TODO we may also want to avoid sending out thousands of values.
        // a subset of values from this entire array should suffice.
        return load;
    }

    @Override
    protected void done() {
        try {
            List<DiscreteTimeData<N>> data = get();
            long lastUpdateTime = appendData(data);
            callback.update(lastUpdateTime);
        } catch (ExecutionException ee) {
            ee.printStackTrace();
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }
    }

    private long appendData(List<DiscreteTimeData<N>> allData) {
        long lastUpdateTime = Long.MIN_VALUE;
        if (allData.size() > 0) {

            /*
             * We have lots of new data to add. we do it in 2 steps:
             * 1. Add everything with notify off.
             * 2. Notify the chart that there has been a change. It does
             * all the expensive computations and redraws itself.
             */

            DiscreteTimeData<N> data;
            for (int i = 0; i < allData.size(); i++) {
                data = allData.get(i);
                lastUpdateTime = Math.max(lastUpdateTime, data.getTimeInMillis());
                toUpdate.add(
                        new FixedMillisecond(data.getTimeInMillis()),
                        data.getData(),
                        /* notify = */false);
            }

            toUpdate.fireSeriesChanged();
        }
        return lastUpdateTime;
    }

}